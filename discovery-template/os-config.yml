ios:
  - os: 'ios'
    prompt: '[\r\n][\-\w+\.:/]+(?:\([^\)]+\))?[>#] ?$'
    osstring: 'Cisco IOS Software'
    run-variables: 
      script: |-
          show ip int brief {
              extract /^(\S+)\s+\S+\s+YES\s+.*/ into interfaces 
          }
      key: interfaces
    try-script: |-
      show version {
        extract /($osstring)/ as operating_system 
      }
      { 
        operating_system = "$operating_system"
      }
    post-script: |-
      show version {
        extract /^(\S+) uptime is / as hostname
        extract /^[Pp]rocessor [Bb]oard [Ii][Dd]\s+([A-Za-z0-9]+)/ as serial
      }
      show hosts { extract /Default domain is (.*)/ as domain }
      {
        serial = "$serial"
        fqdn = "$hostname.$domain"
      }
    init-commands:
      - term len 0
      - term width 0
    crawl:
      cdp:
        script: |-
          show cdp neighbors detail  {
            extract /^Device\sID:\s(\S+)/ into device_ids
            extract /IP\saddress:\s(\S+)/ into device_ips 
            extract /^Platform:\s(\S+)/ into platforms
            extract /\sCapabilities:\s(\S+)/ into hostnames 
            extract /^Interface:\s(\S+)/ into interfaces
          }
        keys: 
          - device_ids
          - device_ips 
          - platforms
          - hostnames
          - interfaces
        master-key: device_ips
      lldp:
        script: |-
          show cdp neighbors detail  {
            extract /^Device\sID:\s(\S+)/ into device_ids
            extract /IP\saddress:\s(\S+)/ into device_ips 
            extract /^Platform:\s(\S+)/ into platforms
            extract /\sCapabilities:\s(\S+)/ into hostnames 
            extract /^Interface:\s(\S+)/ into interfaces
          }
        keys: 
          - device_ids
          - device_ips 
          - platforms
          - hostnames
          - interfaces
        master-key: device_ips
  - os: 'ios-xe'
    prompt: '[\r\n][\-\w+\.:/]+(?:\([^\)]+\))?[>#] ?$'
    osstring: 'Cisco IOS Software, IOS-XE Software'
    run-variables: 
      script: |-
          show ip int brief {
              extract /^(\S+)\s+\S+\s+YES\s+.*/ into interfaces 
          }
      key: interfaces
    try-script: |-
      show version {
        extract /($osstring)/ as operating_system 
      }
      { 
        operating_system = "$operating_system"
      }
    post-script: |-
      show version {
        extract /^(\S+) uptime is / as hostname
        extract /^[Pp]rocessor [Bb]oard [Ii][Dd]\s+([A-Za-z0-9]+)/ as serial
      }
      show hosts { extract /Default domain is (.*)/ as domain }
      {
        serial = "$serial"
        fqdn = "$hostname.$domain"
      }
    init-commands:
      - term len 0
      - term width 0
    crawl:
      cdp:
        script: |-
          show cdp neighbors detail  {
            extract /^Device\sID:\s(\S+)/ into device_ids
            extract /IP\saddress:\s(\S+)/ into device_ips 
            extract /^Platform:\s(\S+)/ into platforms
            extract /\sCapabilities:\s(\S+)/ into hostnames 
            extract /^Interface:\s(\S+)/ into interfaces
          }
        keys: 
          - device_ids
          - device_ips 
          - platforms
          - hostnames
          - interfaces
        master-key: device_ips
      lldp:
        script: |-
          show cdp neighbors detail  {
            extract /^Device\sID:\s(\S+)/ into device_ids
            extract /IP\saddress:\s(\S+)/ into device_ips 
            extract /^Platform:\s(\S+)/ into platforms
            extract /\sCapabilities:\s(\S+)/ into hostnames 
            extract /^Interface:\s(\S+)/ into interfaces
          }
        keys: 
          - device_ids
          - device_ips 
          - platforms
          - hostnames
          - interfaces
        master-key: device_ips
  - os: 'asa'
    prompt: '[\r\n][\-\w+\.:/]+(?:\([^\)]+\))?[>#] ?$'
    osstring: 'Cisco Adaptive Security Appliance'
    try-script: |-
      show version {
        extract /($osstring)/ as operating_system
      }
      {
        operating_system = "$operating_system"
      }
    post-script: |-
      show version {
        extract /^[Ss]erial [Nn]umber:\s+([A-Za-z0-9]+)/ as serial
      }
      show hostname fqdn { extract /(\S+)/ as domain }
      {
        serial = "$serial"
        fqdn = "$domain"
        operating_system = "$operating_system"
      }
    init-commands:
      - term pager 0
nxos: &value-nxos
  - os: 'nxos'
    prompt: '[\r\n\x00][\-\w+\.:/]+(?:\([^\)]+\))?[>#] ?$'
    osstring: 'Cisco Nexus Operating System'
    try-script: |-
      show version {
        extract /($osstring)/ as operating_system
      }
      {
        operating_system = "$operating_system"
      }
    post-script: |-
      show version {
        extract /[Pp]rocessor [Bb]oard [Ii][Dd]\s+([A-Za-z0-9]+)/ as serial
      }
      show hostname { 
        extract /(\S+)/ as fqdn 
      }
      {
        serial = "$serial"
        fqdn = "$fqdn"
      }
    init-commands:
      - term len 0
ios_xr:
  - os: 'ios_xr'
    prompt: 'RP/\d+/(?:RS?P)?\d+\/CPU\d+:[^#]+(?:\([^\)]+\))?#$'
    osstring: 'Cisco IOS XR Software'
    run-variables: 
      script: |-
          show ip int brief {
              extract /^(\S+)\s+\S+\s+YES\s+.*/ into interfaces 
          }
      key: interfaces
    try-script: |-
      show version {
        extract /($osstring)/ as operating_system
      }
      {
        operating_system = "$operating_system"
      }
    post-script: |-
      show version {
        extract /^(\S+) uptime is / as hostname 
      }
      show hosts { extract /Default domain is (.*)/ as domain }
      admin
      show dsc {
        extract /CPU0\s+.*\s+([A-Za-z0-9]+)\s*$/ as serial
      }
      exit
      {
        serial = "$serial"
        fqdn = "$hostname.$domain"
      }
    init-commands:
      - terminal exec prompt no-timestamp
      - terminal len 0
      - terminal width 0
junos:
  - os: 'junos'
    prompt: '(?:[\\r\\n]+(?:(?:\\{master(?::\\d+)?\\}|\\{backup(?::\\d+)?\\})|(?:\\{primary:node\\d+\\}|\\{secondary:node\\d+\\}))?(?:\\[edit[^\\]\\r\\n]*\\])?)?[\\r\\n]+[\\w\\-\\.]+@[\\-\\w+\\.:]+[%>#] $'
    init-regex:
      match: '^-+\s+JUNOS '
    prompt-regex:
      match: '\S+@(\S+)\>'
      value: 'hostname'
    post-script: |-
      show configuration system domain-name { extract /domain-name (.*);/ as domain }
      show chassis hardware { extract /Chassis\s+.*\s+([A-Z0-9]+)\s+.*$/ as serial }
      {
        serial = "$serial"
        fqdn = "$hostname.$domain"
      }
    init-commands:
      - set cli screen-length 0
      - set cli screen-width 0
      - set cli terminal ansi

# current driver sometimes mismatches NX-OS as ISAM
isam: *value-nxos
